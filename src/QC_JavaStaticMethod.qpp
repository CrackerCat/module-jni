/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_JavaStaticMethod.qpp JavaStaticMethod class definition */
/*
  Qore Programming Language

  Copyright (C) 2016 Qore Technologies, s.r.o.

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Note that the Qore library is released under a choice of three open-source
  licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
  information.
*/

#include <qore/Qore.h>
#include "Method.h"

//! Represents a static method in a Java class.
/**
 */
qclass JavaStaticMethod [arg=jni::Method* method; ns=Qore::Jni; flags=final; vparent=JavaObject];

//! Defined private to prevent Qore code from creating instances.
/**
 */
private:internal JavaStaticMethod::constructor() {
}

//! Invokes the method.
/**
    @param ... arguments of the method
    @return the return value
    @throws JNI-ERROR if the arguments cannot be converted or if the method throws an exception
 */
any JavaStaticMethod::invoke(...) {
   try {
      return method->invokeStatic(args);
   } catch (jni::Exception &e) {
      e.convert(xsink);
      return QoreValue();
   }
}
