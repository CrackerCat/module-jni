#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%requires qore >= 0.8.13

%requires Util

%new-style
%strict-args
%require-types
%enable-all-warnings

%exec-class MakeInc

class MakeInc {
    private {
        const Opts = (
            "help": "h,help",
            );

        const BlockSize = 4096;
        const LineSize = 12;
    }

    constructor() {
        GetOpt g(Opts);
        hash opts = g.parse3(\ARGV);
        if (opts.help)
            usage();
        *string file = shift ARGV;
        if (!file)
            usage();

        *string outname = shift ARGV;
        if (exists outname) {
            if (is_dir(outname))
                outname = dirname(outname) + DirSep + basename(getName(file));
        }
        else
            outname = getName(outname);

        printf("processing %s -> %s\n", file, outname);

        string name = basename(file);
        {
            int i = name.rfind(".");
            if (i != -1)
                splice name, i;
        }

        FileInputStream f(file);

        StreamWriter w(new FileOutputStream(outname));

        w.printf("//generated from %s\nstatic unsigned char java_org_qore_jni_%s_class[] = {", file, name);

        # character count
        int cc = 0;
        int tc = 0;

        while (True) {
            *binary b = f.read(BlockSize);
            if (!b)
                break;
            for (int i = 0; i < b.size(); ++i) {
                if (tc)
                    w.write(",");
                if (!(cc % LineSize)) {
                    cc = 0;
                    w.write("\n ");
                }
                w.printf(" 0x%02x", b[i]);
                ++cc;
                ++tc;
            }
        }

        string oname = basename(file);
        oname =~ s/\./_/g;
        w.printf("\n};\nstatic unsigned int java_org_qore_jni_%s_len = %d;\n", oname, tc);
    }

    static usage() {
        printf("usage: %s [options]
 -h,--help     this help text\n",
               get_script_name());
        exit(1);
    }

    static string getName(string name) {
        int i = name.rfind(".");
        if (i != -1)
            splice name, i;
        name += ".inc";

        i = name.rfind(DirSep);
        if (i != -1)
            splice name, i + 1, 0, "JavaClass";

        return name;
    }
}
