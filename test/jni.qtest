#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%require-types
%strict-args
%enable-all-warnings

%requires jni
%requires QUnit

%exec-class Main

class DtorThrows {
    destructor() {
        throw "DTOR-ERROR";
    }
    dummy() {
    }
}

public class Main inherits QUnit::Test {

    constructor() : Test("jni test", "1.0") {
        addTestCase("base test", \testJni());
        addTestCase("static method invocation test", \testStaticMethods());
        addTestCase("instance method invocation test", \testInstanceMethods());
        addTestCase("float conversion test", \testFloatConversions());
        addTestCase("static fields access test", \testStaticFields());
        addTestCase("instance fields access test", \testInstanceFields());
        addTestCase("callback test", \testCallback());
        addTestCase("constructor test", \testConstructor());
        addTestCase("string test", \testString());
        addTestCase("array test", \testArray());
        addTestCase("dispatcher destructor throws a Qore exception", \testDispatchDtorThrows());
        addTestCase("callback return value test", \testCallbackRetVal());
        addTestCase("special conversions test", \testSpecialConversions());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    testJni() {
        Jni::Class mathClass = Jni::load_class("java/lang/Math");
        Jni::StaticMethod acosMethod = mathClass.getStaticMethod("acos", "(D)D");
        Jni::Class systemClass = Jni::load_class("java/lang/System");
        Jni::StaticField outField = systemClass.getStaticField("out", "Ljava/io/PrintStream;");
        Jni::Class printStreamClass = Jni::load_class("java/io/PrintStream");
        Jni::Method printlnMethod = printStreamClass.getMethod("println", "(D)V");
        printlnMethod.invoke(outField.get(), acosMethod.invoke(-1));
    }

    testStaticMethods() {
        Jni::Class clazz = Jni::load_class("org/qore/jni/test/StaticMethods");

        # the purpose is to test all possible argument and return value types
        Jni::StaticMethod set = clazz.getStaticMethod("set", "(I)V");
        Jni::StaticMethod get = clazz.getStaticMethod("get", "()I");          # overloaded
        Jni::StaticMethod cmp = clazz.getStaticMethod("cmp", "(SJ)Z");
        Jni::StaticMethod add = clazz.getStaticMethod("add", "(BC)C");
        Jni::StaticMethod get2 = clazz.getStaticMethod("get", "(Z)J");        # overloaded
        Jni::StaticMethod avg = clazz.getStaticMethod("avg", "(BBB)B");       # overloaded
        Jni::StaticMethod max = clazz.getStaticMethod("max", "(JJ)S");
        Jni::StaticMethod avg2 = clazz.getStaticMethod("avg", "(FF)F");       # overloaded
        Jni::StaticMethod avg3 = clazz.getStaticMethod("avg", "(DD)D");       # overloaded
        Jni::StaticMethod wrap = clazz.getStaticMethod("wrap", "(I)Ljava/lang/Integer;");
        Jni::StaticMethod unwrap = clazz.getStaticMethod("unwrap", "(Ljava/lang/Integer;)I");
        Jni::StaticMethod getLongArray = clazz.getStaticMethod("getLongArray", "()[Ljava/lang/Long;");
        Jni::StaticMethod useArray = clazz.getStaticMethod("useArray", "([Ljava/lang/Object;)V");

        # set() expects one argument
        assertThrows("JNI-ERROR", "Too few arguments", sub() { set.invoke(); });

        # get() expects no arguments
        assertThrows("JNI-ERROR", "Too many arguments", sub() { get.invoke(123); });

        # cmp() expects two arguments
        assertThrows("JNI-ERROR", "Too few arguments", sub() { cmp.invoke(1); });
        assertThrows("JNI-ERROR", "Too many arguments", sub() { cmp.invoke(1, 2, 3); });

        # set() has no retval, we test the side effect below using get()
        set.invoke(42);

        # get() returns the value previously passed to set()
        assertEq(42, get.invoke());

        # cmp() 'converts' first arg to short and returns true if it is greater than the second argument
        assertTrue(cmp.invoke(1000, -1234567890123));
        assertTrue(cmp.invoke(32767, 1));
        assertFalse(cmp.invoke(32768, 1));  #the first argument overflows to -32768, which is not greater than 1

        # add() 'converts' first arg to byte (signed 8bit), second arg to char (unsigned 16bit) and adds them together
        assertEq(32768, add.invoke(1, 32767));
        assertEq(0, add.invoke(36, 65500));
        assertEq(65530, add.invoke(-5, -1));      #-1 is 65535
        assertEq(999, add.invoke(255, 1000));     #255 is -1

        # get2() throws if called with true, otherwise returns 2^63-1
        assertThrows("JNI-ERROR", sub() { get2.invoke(True); });
        assertEq(0x7FFFFFFFFFFFFFFF, get2.invoke(False));

        # avg() 'converts' all args to byte and returns their average
        assertEq(2, avg.invoke(1, 2, 3));
        assertEq(85, avg.invoke(126, 2, 127));
        assertEq(-43, avg.invoke(128, 256, -1));  #128 -> -128, 256 -> 0

        # max() compares the arguments, converts the larger to short and returns it
        assertEq(10, max.invoke(10, -4));
        assertEq(-1, max.invoke(65535, 0));
        assertEq(-32768, max.invoke(32768, 32768));

        # avg2() 'converts' all args to float and returns their average
        assertFloatEq(2.92, avg2.invoke(3.14, 2.7), 0.0000001);

        # avg3() returns the average of its arguments
        assertFloatEq(2.92, avg3.invoke(3.14, 2.7), 0.00000000000000001);

        # wrap() & unwrap()
        Jni::Object o = wrap.invoke(42);
        assertEq(42, unwrap.invoke(o));
        assertEq(-123, unwrap.invoke(NOTHING));
        assertThrows("JNI-ERROR", sub() { unwrap.invoke(True); });
        assertThrows("JNI-ERROR", sub() { unwrap.invoke(self); });
        Jni::Object o2 = o;
        delete o2;
        assertThrows("OBJECT-ALREADY-DELETED", sub() { unwrap.invoke(o); });

        # arrays
        Jni::Array longArray = getLongArray.invoke();
        useArray.invoke(longArray);
    }

    testInstanceMethods() {
        Jni::Class clsMethods = Jni::load_class("org/qore/jni/test/Methods");
        Jni::Class clsA = Jni::load_class("org/qore/jni/test/A");
        Jni::Class clsB = Jni::load_class("org/qore/jni/test/B");
        Jni::Class clsC = Jni::load_class("org/qore/jni/test/C");

        Jni::Object c = clsMethods.getStaticField("c", "Lorg/qore/jni/test/C;").get();
        Jni::Object b = clsMethods.getStaticField("b", "Lorg/qore/jni/test/B;").get();

        Jni::Method fInA = clsA.getMethod("f", "()I");
        Jni::Method fInB = clsB.getMethod("f", "()I");
        Jni::Method fInC = clsC.getMethod("f", "()I");
        Jni::Method mInC = clsC.getMethod("m", "()I");

        # virtual dispatch
        assertEq(3, fInA.invoke(c));
        assertEq(3, fInB.invoke(c));
        assertEq(3, fInC.invoke(c));

        # non-virtual dispatch
        assertEq(1, fInA.invokeNonvirtual(c));
        assertEq(2, fInB.invokeNonvirtual(c));
        assertEq(3, fInC.invokeNonvirtual(c));

        # class mismatch
        assertThrows("JNI-ERROR", sub() { mInC.invoke(b); });
        assertThrows("JNI-ERROR", sub() { mInC.invokeNonvirtual(b); });
    }

    testFloatConversions() {
        Jni::Class clazz = Jni::load_class("org/qore/jni/test/FloatConversions");

        assertTrue(clazz.getStaticMethod("isNaNFloat", "(F)Z").invoke(@NaN@));
        assertTrue(clazz.getStaticMethod("isNInfFloat", "(F)Z").invoke(-@Inf@));
        assertTrue(clazz.getStaticMethod("isPInfFloat", "(F)Z").invoke(@Inf@));
        assertTrue(clazz.getStaticMethod("getNaNFloat", "()F").invoke().nanp());
        assertEq(-@Inf@, clazz.getStaticMethod("getNInfFloat", "()F").invoke());
        assertEq(@Inf@, clazz.getStaticMethod("getPInfFloat", "()F").invoke());

        assertTrue(clazz.getStaticMethod("isNaNDouble", "(D)Z").invoke(@NaN@));
        assertTrue(clazz.getStaticMethod("isNInfDouble", "(D)Z").invoke(-@Inf@));
        assertTrue(clazz.getStaticMethod("isPInfDouble", "(D)Z").invoke(@Inf@));
        assertTrue(clazz.getStaticMethod("getNaNDouble", "()D").invoke().nanp());
        assertEq(-@Inf@, clazz.getStaticMethod("getNInfDouble", "()D").invoke());
        assertEq(@Inf@, clazz.getStaticMethod("getPInfDouble", "()D").invoke());
    }

    testStaticFields() {
        Jni::Class clazz = Jni::load_class("org/qore/jni/test/StaticFields");

        Jni::StaticField z = clazz.getStaticField("z", "Z");
        Jni::StaticField b = clazz.getStaticField("b", "B");
        Jni::StaticField c = clazz.getStaticField("c", "C");
        Jni::StaticField s = clazz.getStaticField("s", "S");
        Jni::StaticField i = clazz.getStaticField("i", "I");
        Jni::StaticField j = clazz.getStaticField("j", "J");
        Jni::StaticField f = clazz.getStaticField("f", "F");
        Jni::StaticField d = clazz.getStaticField("d", "D");
        Jni::StaticField n = clazz.getStaticField("n", "Ljava/lang/Number;");
        Jni::StaticField l = clazz.getStaticField("l", "Ljava/lang/Long;");
        Jni::StaticField ba = clazz.getStaticField("ba", "[B");
        Jni::StaticField o = clazz.getStaticField("o", "Ljava/lang/Object;");
        Jni::StaticField oa = clazz.getStaticField("oa", "[Ljava/lang/Object;");
        Jni::StaticField ia = clazz.getStaticField("ia", "[Ljava/lang/Integer;");

        z.set(True);
        assertTrue(z.get());

        b.set(42);
        assertEq(42, b.get());

        c.set(32768);
        assertEq(32768, c.get());

        s.set(65535);
        assertEq(-1, s.get());

        i.set(0x123456789);
        assertEq(0x23456789, i.get());

        j.set(0x123456789);
        assertEq(0x123456789, j.get());

        f.set(3.14);
        assertFloatEq(3.14, f.get(), 0.0001);
        f.set(@NaN@);
        assertTrue(f.get().nanp());

        d.set(2.7);
        assertFloatEq(2.7, d.get(), 0.0000001);
        d.set(@Inf@);
        assertTrue(d.get().infp());

        Jni::Object intObj = clazz.getStaticMethod("wrap", "(I)Ljava/lang/Integer;").invoke(42);
        n.set(intObj);
        assertEq(42, clazz.getStaticMethod("unwrapN", "()I").invoke());

        assertThrows("JNI-ERROR", sub(){ l.set(intObj); });
        assertEq(NOTHING, l.get());

        Jni::Array byteArray = ba.get();
        Jni::Array objectArray = oa.get();
        Jni::Array intArray = ia.get();

        o.set(byteArray);                                               # arrays in Java are Objects
        assertThrows("JNI-ERROR", sub() { oa.set(byteArray); });        # byte[] is not a subtype of Object[]
        oa.set(intArray);                                               # arrays in Java are covariant
        assertThrows("JNI-ERROR", sub() { ia.set(objectArray); });      # Object[] is not a subtype of Integer[]
        assertThrows("JNI-ERROR", sub() { n.set(byteArray); });         # byte[] is not a Number
        assertThrows("JNI-ERROR", sub() { ba.set(intObj); });           # Integer is not a byte[]

        o.set(clazz);                                                   # classes are objects, too
    }

    testInstanceFields() {
        Jni::Class clazz = Jni::load_class("org/qore/jni/test/Fields");

        Jni::Object instance = clazz.getStaticField("instance", "Lorg/qore/jni/test/Fields;").get();

        Jni::Field z = clazz.getField("z", "Z");
        Jni::Field b = clazz.getField("b", "B");
        Jni::Field c = clazz.getField("c", "C");
        Jni::Field s = clazz.getField("s", "S");
        Jni::Field i = clazz.getField("i", "I");
        Jni::Field j = clazz.getField("j", "J");
        Jni::Field f = clazz.getField("f", "F");
        Jni::Field d = clazz.getField("d", "D");
        Jni::Field ba = clazz.getField("ba", "[B");
        Jni::Field o = clazz.getField("o", "Ljava/lang/Object;");
        Jni::Field oa = clazz.getField("oa", "[Ljava/lang/Object;");
        Jni::Field ia = clazz.getField("ia", "[Ljava/lang/Integer;");

        z.set(instance, True);
        assertTrue(z.get(instance));

        b.set(instance, 42);
        assertEq(42, b.get(instance));

        c.set(instance, 32768);
        assertEq(32768, c.get(instance));

        s.set(instance, 65535);
        assertEq(-1, s.get(instance));

        i.set(instance, 0x123456789);
        assertEq(0x23456789, i.get(instance));

        j.set(instance, 0x123456789);
        assertEq(0x123456789, j.get(instance));

        f.set(instance, 3.14);
        assertFloatEq(3.14, f.get(instance), 0.0001);
        f.set(instance, @NaN@);
        assertTrue(f.get(instance).nanp());

        d.set(instance, 2.7);
        assertFloatEq(2.7, d.get(instance), 0.0000001);
        d.set(instance, @Inf@);
        assertTrue(d.get(instance).infp());

        Jni::Array byteArray = ba.get(instance);
        Jni::Array objectArray = oa.get(instance);
        Jni::Array intArray = ia.get(instance);

        o.set(instance, byteArray);                                             # arrays in Java are Objects
        assertThrows("JNI-ERROR", sub() { oa.set(instance, byteArray); });      # byte[] is not a subtype of Object[]
        oa.set(instance, intArray);                                             # arrays in Java are covariant
        assertThrows("JNI-ERROR", sub() { ia.set(instance, objectArray); });    # Object[] is not a subtype of Integer[]

        o.set(instance, clazz);                                                 # classes are objects, too

        assertThrows("JNI-ERROR", sub() { z.set(byteArray, True); });
    }

    testCallback() {
        int i = 1;
        Jni::InvocationHandler h = new Jni::InvocationHandler(sub(Jni::Method m, *Jni::Array args) { if (++i == 4) throw "CALLBACK-ERROR";});

        Jni::Object o = Jni::implement_interface(h, Jni::load_class("java/lang/Runnable"));
        Jni::Class clazz = Jni::load_class("org/qore/jni/test/Callbacks");
        Jni::StaticMethod callNow = clazz.getStaticMethod("callNow", "(Ljava/lang/Runnable;)V");
        Jni::StaticMethod callInThread = clazz.getStaticMethod("callInThread", "(Ljava/lang/Runnable;)V");
        Jni::StaticMethod trueIfThrows = clazz.getStaticMethod("trueIfThrows", "(Ljava/lang/Runnable;)Z");
        Jni::StaticMethod doThrow = clazz.getStaticMethod("doThrow", "()V");
        callNow.invoke(o);
        assertEq(2, i);
        callInThread.invoke(o);
        usleep(200ms);
        assertEq(3, i);
        assertThrows("CALLBACK-ERROR", sub() { callNow.invoke(o); });
        h.destroy();

        h = new Jni::InvocationHandler(sub(Jni::Method m, *Jni::Array args) { doThrow.invoke(); });
        assertTrue(trueIfThrows.invoke(Jni::implement_interface(h, Jni::load_class("java/lang/Runnable"))));
        h.destroy();
    }

    testConstructor() {
        Jni::Class cls = Jni::load_class("java/lang/Integer");
        Jni::Constructor ctor = cls.getConstructor("(I)V");
        Jni::Object obj = ctor.newInstance(42);
        assertEq(42, cls.getMethod("intValue", "()I").invoke(obj));
    }

    testString() {
        Jni::Class cls = Jni::load_class("java/lang/Integer");
        Jni::Object obj = cls.getStaticMethod("valueOf", "(Ljava/lang/String;)Ljava/lang/Integer;").invoke("42");
        assertEq(42, cls.getMethod("intValue", "()I").invoke(obj));

        obj = cls.getConstructor("(I)V").newInstance(123);
        assertEq("123", cls.getMethod("toString", "()Ljava/lang/String;").invoke(obj));
    }

    testArray() {
        Jni::Array a = Jni::new_boolean_array(3);
        a.set(0, True);
        assertThrows("JNI-ERROR", sub() { a.set(3, True); });
        assertEq(3, a.length());
        assertTrue(a.get(0));
        assertFalse(a.get(1));

        a = Jni::new_byte_array(4);
        a.set(0, 127);
        a.set(2, -128);
        a.set(3, 257);
        assertThrows("JNI-ERROR", sub() { a.get(4); });
        assertEq(127, a.get(0));
        assertEq(0, a.get(1));
        assertEq(-128, a.get(2));
        assertEq(1, a.get(3));

        a = Jni::new_char_array(4);
        a.set(0, 65535);
        a.set(2, -1);
        a.set(3, 65537);
        assertEq(65535, a.get(0));
        assertEq(0, a.get(1));
        assertEq(65535, a.get(2));
        assertEq(1, a.get(3));

        a = Jni::new_short_array(4);
        a.set(0, 32767);
        a.set(2, -32768);
        a.set(3, 65537);
        assertEq(32767, a.get(0));
        assertEq(0, a.get(1));
        assertEq(-32768, a.get(2));
        assertEq(1, a.get(3));

        a = Jni::new_int_array(4);
        a.set(0, 2147483647);
        a.set(2, -2147483648);
        a.set(3, 0x100000001);
        assertEq(2147483647, a.get(0));
        assertEq(0, a.get(1));
        assertEq(-2147483648, a.get(2));
        assertEq(1, a.get(3));

        a = Jni::new_long_array(4);
        a.set(0, 9223372036854775807);
        a.set(2, -9223372036854775807 - 1);
        assertEq(9223372036854775807, a.get(0));
        assertEq(0, a.get(1));
        assertEq(-9223372036854775807 - 1, a.get(2));

        a = Jni::new_float_array(4);
        a.set(0, 3.14);
        a.set(2, @NaN@);
        a.set(3, -@Inf@);
        assertFloatEq(3.14, a.get(0), 0.00001);
        assertFloatEq(0, a.get(1), 0.00001);
        assertTrue(a.get(2).nanp());
        assertTrue(a.get(3) < 0 && a.get(3).infp());

        a = Jni::new_double_array(4);
        a.set(0, 3.14);
        a.set(2, @NaN@);
        a.set(3, -@Inf@);
        assertFloatEq(3.14, a.get(0), 0.00000000001);
        assertFloatEq(0, a.get(1), 0.00000000001);
        assertTrue(a.get(2).nanp());
        assertTrue(a.get(3) < 0 && a.get(3).infp());

        a = Jni::new_object_array(4, Jni::load_class("java/lang/String"));
        a.set(0, "Hello, world!");
        a.set(2, NOTHING);
        assertThrows("JNI-ERROR", sub() { a.set(3, a); });
        assertEq("Hello, world!", a.get(0));
        assertEq(NOTHING, a.get(1));
        assertEq(NOTHING, a.get(2));

        #two-dimensional int array
        a = Jni::new_object_array(2, Jni::load_class("[I"));
        a.set(0, Jni::new_int_array(2));
        a.set(1, Jni::new_int_array(2));
        a.get(0).set(0, 1);
        a.get(0).set(1, 2);
        a.get(1).set(0, 3);
        a.get(1).set(1, 4);
        assertEq(1, a.get(0).get(0));
        assertEq(2, a.get(0).get(1));
        assertEq(3, a.get(1).get(0));
        assertEq(4, a.get(1).get(1));
    }

    testDispatchDtorThrows() {
        Jni::InvocationHandler h;
        {
            DtorThrows instance();
            h = new Jni::InvocationHandler(sub(Jni::Method m, *Jni::Array args) { instance.dummy(); });
        }
        assertThrows("DTOR-ERROR", sub() { h.destroy(); });
    }

    testCallbackRetVal() {
        Jni::InvocationHandler h = new Jni::InvocationHandler(any sub(Jni::Method m, *Jni::Array args) { return "STR"; });
        Jni::Object f = Jni::implement_interface(h, Jni::load_class("org/qore/jni/test/StringFactory"));
        Jni::Class clazz = Jni::load_class("org/qore/jni/test/Callbacks");
        Jni::StaticMethod createString = clazz.getStaticMethod("createString", "(Lorg/qore/jni/test/StringFactory;)Ljava/lang/String;");
        assertEq("*STR*", createString.invoke(f));
    }

    testSpecialConversions() {
        Jni::StaticMethod m = Jni::load_class("org/qore/jni/test/StaticMethods").getStaticMethod("conversions", "(Ljava/lang/String;)Ljava/lang/Object;");
        assertEq(NOTHING, m.invoke(""));

        Jni::Object o = m.invoke("method");
        assertTrue(o instanceof Jni::Method);
        assertEq("42", o.invoke(Jni::load_class("java/lang/Integer").getConstructor("(I)V").newInstance(42)));

        o = m.invoke("static method");
        assertTrue(o instanceof Jni::StaticMethod);
        assertEq("42", Jni::load_class("java/lang/Integer").getMethod("toString", "()Ljava/lang/String;").invoke(o.invoke(42)));

        o = m.invoke("constructor");
        assertTrue(o instanceof Jni::Constructor);
        assertEq("42", Jni::load_class("java/lang/Integer").getMethod("toString", "()Ljava/lang/String;").invoke(o.newInstance(42)));

        Jni::Class fieldsClass = Jni::load_class("org/qore/jni/test/Fields");
        Jni::Object fieldsInstance = fieldsClass.getStaticField("instance", "Lorg/qore/jni/test/Fields;").get();

        o = m.invoke("field");
        assertTrue(o instanceof Jni::Field);
        o.set(fieldsInstance, 123);
        assertEq(123, fieldsClass.getField("i", "I").get(fieldsInstance));

        o = m.invoke("static field");
        assertTrue(o instanceof Jni::StaticField);
        o.set(456);
        assertEq(456, Jni::load_class("org/qore/jni/test/StaticFields").getStaticField("i", "I").get());
    }
}
