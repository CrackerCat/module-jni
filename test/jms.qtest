#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

/* jms.qtest

    Run with QORE_JNI_CLASSPATH set to a a JMS provider JAR

    NOTE: requires the JMS queue "abc" to be created in advance - ex with Glassfish:
    ---
    prompt% ./bin/asadmin
    asadmin> create-jms-resource --restype javax.jms.Queue --property Name=PhysicalQueue abc
    ---
*/

%new-style
%require-types
%strict-args
%enable-all-warnings

%requires jni
%requires QUnit
%requires Util

%module-cmd(jni) import javax.naming.InitialContext
%module-cmd(jni) import javax.jms.*

%exec-class Main

public class Main inherits QUnit::Test {
    private {
        Counter c(1);
        any data;

        const TextMsg = "Hello, world!";
    }

    constructor() : Test("JMS test", "1.0", \ARGV) {
        addTestCase("base test", \testJms());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    testJms() {
        # these properties are the default; included here to provide an example
        Properties props();
        props.setProperty("java.naming.factory.initial", "com.sun.enterprise.naming.SerialInitContextFactory");
        props.setProperty("org.omg.CORBA.ORBInitialHost", "localhost");
        props.setProperty("org.omg.CORBA.ORBInitialPort", "3700");

        #InitialContext ctx(props);

        InitialContext ctx;

        try {
            ctx = new InitialContext(props);
        }
        catch (hash ex) {
            printf("%s\n", get_exception_string(ex));
            printf("stack: \n");
            map printf(" - %s:%d: %s::%s()\n", $1.getFileName(), $1.getLineNumber(), $1.getClassName(), $1.getMethodName()), ex.arg.getStackTrace();
            return;
        }

        Connection connection = cast<ConnectionFactory>(ctx.lookup("jms/__defaultConnectionFactory")).createConnection();
        Session session = connection.createSession(Session::AUTO_ACKNOWLEDGE);

        Destination queue = cast<Destination>(ctx.lookup("abc"));

        MessageProducer producer = session.createProducer(queue);
        MessageConsumer consumer = session.createConsumer(queue);

        # in order to implement the MessageListener interface for the callback, we have to use implement_interface() as follows:
        ClassLoader loader = connection.getClass().getClassLoader();
        consumer.setMessageListener(cast<MessageListener>(QoreJni::implement_interface(loader, new QoreJni::JavaInvocationHandler(\messageCallback()), Class::forName("javax.jms.MessageListener", True, loader))));

        connection.start();

        TextMessage message = session.createTextMessage();
        message.setText(TextMsg);

        producer.send(message);
        # wait for message to be received
        c.waitForZero();

        assertEq(TextMsg, data);

        # unset the listener and exit
        consumer.setMessageListener(NOTHING);
    }

    # JMS message callback for the MessageListener interface
    messageCallback(QoreJni::JavaMethod method, *QoreJni::JavaArray args) {
        TextMessage msg = cast<TextMessage>(args.getJava(0));
        data = msg.getText();
        if (m_options.verbose)
            printf("*** JMS message received: %y\n", msg.getText());
        c.dec();
    }
}
