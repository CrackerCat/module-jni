#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

/* jms.qtest

    Run with QORE_JNI_CLASSPATH set to a a JMS provider JAR

    NOTE: requires the JMS queue "abc" to be created in advance - ex with Glassfish:
    ---
    prompt% ./bin/asadmin
    asadmin> create-jms-resource --restype javax.jms.Queue --property Name=PhysicalQueue abc
    ---
*/

%new-style
%require-types
%strict-args
%enable-all-warnings

%requires jni
%requires QUnit

%module-cmd(jni) import javax.naming.InitialContext
%module-cmd(jni) import javax.jms.*
%module-cmd(jni) import com.sun.messaging.jms.ra.ConnectionFactoryAdapter

%exec-class Main

public class Main inherits QUnit::Test {
    private {
        string jar;
    }

    constructor() : Test("JMS test", "1.0", \ARGV) {
        addTestCase("base test", \testJms());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    testJms() {
        InitialContext ctx();
        Connection connection = cast<ConnectionFactoryAdapter>(ctx.lookup("jms/__defaultConnectionFactory")).createConnection();
        Session session = connection.createSession(Session::AUTO_ACKNOWLEDGE);

        Destination queue = cast<Destination>(ctx.lookup("abc"));

        MessageProducer producer = session.createProducer(queue);
        MessageConsumer consumer = session.createConsumer(queue);

        code w = get_callback();

        ClassLoader loader = connection.getClass().getClassLoader();
        consumer.setMessageListener(cast<MessageListener>(QoreJni::implement_interface(loader, new QoreJni::JavaInvocationHandler(w), Class::forName("javax.jms.MessageListener", True, loader))));

        connection.start();

        TextMessage message = session.createTextMessage();
        message.setText("Hello, world!");

        producer.send(message);
    }
}

# workaround for issue #1303
code sub get_callback() {
    return sub(QoreJni::JavaMethod method, *QoreJni::JavaArray args) {
        TextMessage msg = cast<TextMessage>(args.getJava(0));
        printf("IN CALLBACK\n");
        printf("Received: %y\n", msg.getText());
        printf("END CALLBACK\n");
    };
}
